generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "public")]
}

enum FeatureType {
  EXPERIENCE,
  PROJECT,
  SKILL,
  EDUCATION
}

model Profile {
  id                String            @id @default(uuid()) @map("user_id")
  email             String            @unique
  googleId          String?           @unique @map("google_id")
  fullName          String            @map("full_name")
  password          String?
  location          String?
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  education         Education[]
  experiences       Experience[]
  projects          Project[]
  skills            Skill[]
  resumes           Resume[]
  Usage             Usage[]
}

model Education {
  id             String        @id @default(uuid()) @map("edu_id")
  userId         String        @map("user_id")         
  institution    String
  degree         String
  field          String
  startDate      DateTime?     @map("start_date")
  endDate        DateTime?     @map("end_date")
  gpa            Float?
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  user           Profile       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id               String     @id @default(uuid()) @map("exp_id")
  userId           String     @map("user_id")  
  role             String
  company          String
  startDate        DateTime   @map("start_date")
  endDate          DateTime?  @map("end_date")
  responsibilities String     @db.Text
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  user             Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id            String      @id @default(uuid()) @map("project_id")
  userId        String      @map("user_id")  
  projectName   String      @map("project_name")
  description   String      @db.Text
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  user          Profile     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  fprint          String     @id @map("resume_id")
  userId          String     @map("user_id")  
  title           String     
  chunkIds        Int[]      @db.IntArray @map("chunk_ids")
  fileUrl         String     @map("file_url")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  user            Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId])
}

model Skill {
  id                String       @id @default(uuid()) @map("skill_id")
  userId            String       @map("user_id")  
  skillName         String       @map("skill_name")
  yearsExp          Int          @default(0) @map("years_exp")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  user              Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usage {
  id                 String     @id @default(uuid()) @map("usage_id")
  userId             String     @map("user_id")  
  usageDate          DateTime   @default(now()) @map("usage_date")
  resumeGenerations  Int?       @default(0) @map("resume_generations")
  tokensUsed         Int?       @default(0) @map("tokens_used")
  user               Profile    @relation(fields: [UserId], references: [id], onDelete: Cascade)
}

model Embeddings {
  id            String                  @id @default(uuid()) @map("embedding_id")
  userId        String                  @map("user_id")  
  featureType   FeatureType             @map("feature_type")
  content       String
  embedding     Unsupported("vector")
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")
  sourceId      String                  @map("source_id")
  user          Profile                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([featureType, sourceId])
}
