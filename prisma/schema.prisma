generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "public")]
}

model user_education {
  edu_id         String    @id @default(uuid()) @db.Uuid
  user_id        String    @db.Uuid
  institution    String?
  degree         String?
  field_of_study String?
  start_date     DateTime? @db.Date
  end_date       DateTime? @db.Date
  gpa            String?
  embedding      Unsupported("vector")
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_experiences {
  exp_id           String    @id @default(uuid()) @db.Uuid
  user_id          String    @db.Uuid
  role             String
  company          String?
  start_date       DateTime? @db.Date
  end_date         DateTime? @db.Date
  responsibilities String?
  embedding        Unsupported("vector")
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_projects {
  project_id   String    @id @default(uuid()) @db.Uuid
  user_id      String    @db.Uuid
  project_name String
  description  String?
  tech_stack   String?
  embedding    Unsupported("vector") 
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_resumes {
  resume_id       String    @id @default(uuid()) @db.Uuid
  user_id         String    @db.Uuid
  job_description String?
  file_url        String
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  users           users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_skills {
  skill_id          String    @id @default(uuid()) @db.Uuid
  user_id           String    @db.Uuid
  skill_name        String
  years_exp         Int?      @default(0)
  example           String?
  embedding         Unsupported("vector")
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  users             users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_usage {
  usage_id           String    @id @default(uuid()) @db.Uuid
  user_id            String    @db.Uuid
  usage_date         DateTime? @default(now()) @db.Timestamp(6)
  resume_generations Int?      @default(0)
  tokens_used        Int?      @default(0)
  notes              String?
  users              users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model users {
  user_id          String             @id @default(uuid()) @db.Uuid
  email            String             @unique @db.VarChar(255)
  google_id        String?            @unique @db.VarChar(255)
  full_name        String?            @db.VarChar(255)
  hashedPassword   String?
  location         String?
  bio              String?
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  user_education   user_education[]
  user_experiences user_experiences[]
  user_projects    user_projects[]
  user_resumes     user_resumes[]
  user_skills      user_skills[]
  user_usage       user_usage[]
}
