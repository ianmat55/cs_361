generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_education {
  edu_id         Int                    @id @default(autoincrement())
  user_id        Int?                   @unique
  institution    String?
  degree         String?
  field_of_study String?
  start_date     DateTime?              @db.Date
  end_date       DateTime?              @db.Date
  gpa            String?
  embedding      Bytes
  created_at     DateTime?              @default(now()) @db.Timestamp(6)
  updated_at     DateTime?              @default(now()) @db.Timestamp(6)
  users          users?                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_experiences {
  exp_id           Int                    @id @default(autoincrement())
  user_id          Int?
  role             String
  company          String?
  start_date       DateTime?              @db.Date
  end_date         DateTime?              @db.Date
  responsibilities String?
  embedding        Bytes
  created_at       DateTime?              @default(now()) @db.Timestamp(6)
  updated_at       DateTime?              @default(now()) @db.Timestamp(6)
  users            users?                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_projects {
  project_id   Int                    @id @default(autoincrement())
  user_id      Int?
  project_name String
  description  String?
  tech_stack   String?
  embedding    Bytes
  created_at   DateTime?              @default(now()) @db.Timestamp(6)
  updated_at   DateTime?              @default(now()) @db.Timestamp(6)
  users        users?                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_resumes {
  resume_id       Int       @id @default(autoincrement())
  user_id         Int?
  job_description String?
  file_url        String
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  users           users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_skills {
  skill_id          Int                    @id @default(autoincrement())
  user_id           Int?
  skill_name        String
  proficiency_level String?
  embedding         Bytes
  created_at        DateTime?              @default(now()) @db.Timestamp(6)
  users             users?                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_usage {
  usage_id           Int       @id @default(autoincrement())
  user_id            Int?
  usage_date         DateTime? @default(now()) @db.Timestamp(6)
  resume_generations Int?      @default(0)
  tokens_used        Int?      @default(0)
  notes              String?
  users              users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id          Int                @id @default(autoincrement())
  email            String             @unique @db.VarChar(255)
  full_name        String?            @db.VarChar(255)
  location         String?
  bio              String?
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  user_education   user_education[]
  user_experiences user_experiences[]
  user_projects    user_projects[]
  user_resumes     user_resumes[]
  user_skills      user_skills[]
  user_usage       user_usage[]
}
