generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "public")]
}

enum FeatureType {
  EXPERIENCE
  PROJECT
  SKILL
  EDUCATION
}

model Profile {
  id                 String                 @id @default(uuid()) @map("user_id")
  email              String                 @unique
  googleId           String?                @unique @map("google_id")
  fullName           String                 @map("full_name")
  password           String?
  location           String?
  createdAt          DateTime               @default(now()) @map("created_at")
  updatedAt          DateTime               @updatedAt @map("updated_at")
  education          Education[]
  experience         Experience[]
  projects           Project[]
  skills             UserSkill[]
  resumes            Resume[]
  usage              Usage[]
  embeddings         Embeddings[]
}

model Education {
  id                 String                 @id @default(uuid()) @map("edu_id")
  userId             String                 @map("user_id")         
  institution        String
  degree             String
  field              String
  startDate          DateTime?              @map("start_date")
  endDate            DateTime?              @map("end_date")
  gpa                Float?
  user               Profile                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id                 String                 @id @default(uuid()) @map("exp_id")
  userId             String                 @map("user_id")  
  role               String
  company            String
  startDate          DateTime               @map("start_date")
  endDate            DateTime?              @map("end_date")
  responsibilities   String                 @db.Text
  user               Profile                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                 String                 @id @default(uuid()) @map("project_id")
  userId             String                 @map("user_id")  
  projectName        String                 @map("project_name")
  description        String                 @db.Text
  user               Profile                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id                 String                 @id @default(uuid()) @map("resume_id")
  userId             String                 @map("user_id")  
  title              String     
  fileUrl            String                 @map("file_url")
  parsed             Boolean                @default(false)
  pages              Int
  createdAt          DateTime               @default(now()) @map("created_at")
  user               Profile                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Skill {
  id                 String                 @id @default(uuid()) @map("skill_id")
  userId             String                 @map("user_id")  
  name               String                 @unique 
  user               UserSkill[]              
}

model UserSkill {
  id                 String                 @id @default(uuid())
  userId             String
  skillId            String
  yearsExp           Int 
  user               Profile                @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill              Skill                  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model Usage {
  id                 String                 @id @default(uuid()) @map("usage_id")
  userId             String                 @map("user_id")  
  usageDate          DateTime               @default(now()) @map("usage_date")
  resumeGenerations  Int?                   @default(0) @map("resume_generations")
  tokensUsed         Int?                   @default(0) @map("tokens_used")
  user               Profile                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Embeddings {
  id                String                  @id @default(uuid()) @map("embedding_id")
  userId            String                  @map("user_id")  
  featureType       FeatureType             @map("feature_type")
  embedding         Unsupported("vector")
  createdAt         DateTime                @default(now()) @map("created_at")
  sourceId          String                  @map("source_id") // resumeUploadId or experienceId
  ordinal           Int                     
  user              Profile                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([featureType, sourceId, ordinal])
}
